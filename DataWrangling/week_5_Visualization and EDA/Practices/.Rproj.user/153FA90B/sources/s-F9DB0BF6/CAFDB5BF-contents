---
title: "Assignment_1"
author: "Hans Franke"
date: "September 28, 2020"
output: rmarkdown::github_document
---

```{r, echo = FALSE}
knitr::opts_chunk$set(
  fig.path = "README_figs/README-"
)
```


Importing libraries

```{r }
library(tidyverse)
library(ISLR)
```


## Question 1


## Question 2:
### Run the code below to generate data. There will be three vectors in your environment. Put them in a data frame for entering it in a ggplot() call using either the data.frame() or the tibble() function. Give informative names and make sure the types are correct (use the as.<type>() functions). Name the result gg_students

```{r}
set.seed(1234)
student_grade  <- rnorm(32, 7)
student_number <- round(runif(32) * 2e6 + 5e6)
programme      <- sample(c("Science", "Social Science"), 32, replace = TRUE)
```

Converting to DataFrame:

```{r}
gg_students <- tibble( 
                        student_grade = student_grade, 
                        student_number = student_number, 
                        programme = programme
                        )
```

Print Head of DF:
```{r}
head(gg_students)
```

## Question 2
### Plot the first homeruns_plot again, but map the Hits to the y-axis and the HmRun to the x-axis instead.

```{r}
homeruns_plot <- 
  ggplot(Hitters, aes(x = HmRun, y = Hits)) +
  geom_point() +
  labs(x = "HmRun", y = "Hits")

homeruns_plot
```

## Question 4:
### Recreate the same plot once more, but now also map the variable League to the colour aesthetic and the variable Salary to the size aesthetic.

```{r}
homeruns_plot2 <- 
  ggplot(Hitters, aes(x = HmRun, y = Hits, colour = League, size = Salary)) +
  geom_point() +
  labs(x = "HmRun", y = "Hits")

homeruns_plot2           
```

## question 5:
### Look at the many different geoms on the reference website.
https://ggplot2.tidyverse.org/reference/#section-layer-geoms

## Question 6:
### Use geom_histogram() to create a histogram of the grades of the students in the gg_students dataset. Play around with the binwidth argument of the geom_histogram() function.


```{r}
 gg_students_plot <- 
  ggplot(gg_students, aes(x = student_grade))+
  geom_histogram() +
  stat_bin(binwidth = NULL)
  
gg_students_plot 
```

```{r}
gg_students_plot <- 
  ggplot(gg_students, aes(x = student_grade))+
  geom_histogram() +
  stat_bin(binwidth = 1)
  
gg_students_plot 
```

## Question 7
### Use geom_density() to create a density plot of the grades of the students in the gg_students dataset. Add the argument fill = "light seagreen" to geom_density()

```{r}
gg_students_plot_3 <- 
  ggplot(gg_students, aes(student_grade))+
 
  geom_density(fill = "light seagreen")


  
gg_students_plot_3 
```

## Question 8:
### Add rug marks to the density plot through geom_rug(). You can edit the colour and size of the rug marks using those arguments within the geom_rug() function.

```{r}
gg_students_plot_3 <- 
  ggplot(gg_students, aes(student_grade))+
 
  geom_density(fill = "light seagreen")+
  geom_rug(colour='red', size=2)


  
gg_students_plot_3
```

## Question 9:
Increase the data to ink ratio by removing the y axis label, setting the theme to theme_minimal(), and removing the border of the density polygon. Also set the limits of the x-axis to go from 0 to 10 using the xlim() function, because those are the plausible values for a student grade.

```{r}
gg_students_plot_4 <- 
  ggplot(gg_students, aes(student_grade))+ 
 
  xlim(0,10)+
  labs(y = NULL) + 
  geom_density(fill = "light seagreen", outline.type = "lower")+
  geom_rug(colour='red', size=2)+
  theme_minimal()

  
gg_students_plot_4
```

# Boxplot

## Question 10
Create a boxplot of student grades per programme in the gg_students dataset you made earlier: map the programme variable to the x position and the grade to the y position. For extra visual aid, you can additionally map the programme variable to the fill aesthetic

```{r}
students_box_plot <-
  ggplot(gg_students, aes( x = programme, y = student_grade, fill = programme ))+
  geom_boxplot()

students_box_plot
```



## Question 11
What do each of the horizontal lines in the boxplot mean? What do the vertical lines (whiskers) mean?

Answer:
Summary statistics
The lower and upper hinges correspond to the first and third quartiles (the 25th and 75th percentiles). This differs slightly from the method used by the boxplot() function, and may be apparent with small samples. See boxplot.stats() for for more information on how hinge positions are calculated for boxplot().

The upper whisker extends from the hinge to the largest value no further than 1.5 * IQR from the hinge (where IQR is the inter-quartile range, or distance between the first and third quartiles). The lower whisker extends from the hinge to the smallest value at most 1.5 * IQR of the hinge. Data beyond the end of the whiskers are called "outlying" points and are plotted individually.

In a notched box plot, the notches extend 1.58 * IQR / sqrt(n). This gives a roughly 95% confidence interval for comparing medians. See McGill et al. (1978) for more details

font: https://ggplot2.tidyverse.org/reference/geom_boxplot.html?q=boxplot


# Two Densities

## Question 12:
Comparison of distributions across categories can also be done by adding a fill aesthetic to the density plot you made earlier. Try this out. To take care of the overlap, you might want to add some transparency in the geom_density() function using the alpha argument.

```{r}
gg_students_plot_4 <- 
  ggplot(gg_students, aes(student_grade, colour = programme ))+
 
  geom_density(fill = "light blue" , alpha = 0.1 ) 


  
gg_students_plot_4 
```

# BarPlots

## Question 13: 

Create a bar plot of the variable Years from the Hitters dataset.


```{r}

bar_plot <- 
  ggplot(Hitters, aes(Years))+
  stat_count()+
  geom_bar()

bar_plot
```

```{r}
bar_plot <- 
  ggplot(Hitters, aes(Years, fill = League))+
  stat_count()+
  geom_bar()

bar_plot
```

# Line Plot

## Question 14: 
Use geom_line() to make a line plot out of the first 200 observations of the variable Volume (the number of trades made on each day) of the Smarket dataset. You will need to create a Day variable using mutate() to map to the x-position. This variable can simply be the integers from 1 to 200. Remember, you can select the first 200 rows using Smarket[1:200, ].

```{r}

head(Smarket)

# Select only first 200 apperances:
firsts200 <- select(Smarket[1:200,],
                    Volume

)
firsts200

#Creating the x-positions (Days)
firsts200 <- mutate ( firsts200, days = 1:200 )

firsts200
```

```{r}
#Finally Plotting
smart_line <- 
  ggplot(firsts200, aes(x = days, y = Volume)) + 
  geom_line()

smart_line
```

## Question 15:
Give the line a nice colour and increase its size. Also add points of the same colour on top.

```{r}
smart_line2 <- 
  ggplot(firsts200, aes(x = days, y = Volume)) + 
  geom_line(colour = "blue" ) +
  geom_point(colour = "blue")


smart_line2
```

## Question 16:
Use the function which.max() to find out which of the first 200 days has the highest trade volume and use the function max() to find out how large this volume was.

