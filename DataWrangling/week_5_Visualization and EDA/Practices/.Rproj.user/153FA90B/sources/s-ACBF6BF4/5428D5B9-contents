---
title: "R For Data Sciences - Exercises"
subtitle: "Chapter 5 - Data Transformation"
author: "Hans Franke"
date: "September 30, 2020"
output: rmarkdown::github_document
---

```{r}
library("nycflights13")
library("tidyverse")
```

# 5.2: Filter

## 5.2.4

Find all flights that

Had an arrival delay of two or more hours
```{r}
  filter(flights, arr_delay >=120)
```


Flew to Houston (IAH or HOU)
```{r}
  filter(flights, dest == "IAH" | dest == "HOU")
```

Were operated by United, American, or Delta
```{r}
filter(flights, carrier %in% c("AA", "DL", "UA"))
```

Departed in summer (July, August, and September)
```{r}
filter(flights, month >=7 & month <=9)
```


Arrived more than two hours late, but didn’t leave late
```{r}
filter (flights, arr_delay > 120 & dep_delay <= 0 )
```

Were delayed by at least an hour, but made up over 30 minutes in flight
```{r}
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
```


Departed between midnight and 6am (inclusive)
```{r}
#look for midnight = 2400
summary(flights$dep_time)

```
```{r}
filter(flights, dep_time <= 600 | dep_time == 2400)
```



Another useful dplyr filtering helper is between(). What does it do? Can you use it to simplify the code needed to answer the previous challenges?

```{r}
# column, left, right
filter(flights, between(month, 7, 9))
```


How many flights have a missing dep_time? What other variables are missing? What might these rows represent?
```{r}
filter(flights, is.na(dep_time))
```


Why is NA ^ 0 not missing? Why is NA | TRUE not missing? Why is FALSE & NA not missing? Can you figure out the general rule? (NA * 0 is a tricky counterexample!)

*Answer: any number ^ 0 = 1, anything compare with OR True == True, anything compare with & FALSE = FALSE*

# 5.3: Arrange

How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).

```{r}
arrange(flights, desc(is.na(dep_time)), dep_time)
```

Sort flights to find the most delayed flights. Find the flights that left earliest.
```{r}
arrange(flights, desc(dep_delay))
```

Sort flights to find the fastest flights.
```{r}
  arrange(flights, air_time)
```

# 5.4: Select

What happens if you include the name of a variable multiple times in a select() call?

```{r}
#nothing happens, select ignores the duplicates values
head(select(flights, month, month))
```
What does the one_of() function do? Why might it be helpful in conjunction with this vector?

```{r}
# it picks the columns that exists in dataframe, and ignore who dosen`t
head(select(flights, one_of(c("year", "month", "day", "dep_delay", "arr_delay", "hans"))))
```

```{r}
#default = IGNORE case, if u want to exact match use argument (ignore.case = FALSE)
head(select(flights, contains("TIME")))
```

# 5.5: Mutate

Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight.
```{r}
# First need to convert undestand (number 1504 is 15:04pm) so in other words we want to convert to minutes.

1504 %/% 100 * 60 + 1504 %% 100 

```
```{r}
 flights_mod <- mutate(flights, dep_time_mins = (dep_time %/% 100 * 60) + (dep_time %% 100))

 #select only this table
 head(select(flights_mod, dep_time, dep_time_mins))
```


Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?
```{r}

flight_mod2 <- mutate(flights, air_time, air_time_new = arr_time - dep_time )

select(flight_mod2, air_time, arr_time, dep_time, air_time_new)

```


Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?

Find the 10 most delayed flights using a ranking function. How do you want to handle ties? Carefully read the documentation for min_rank().

```{r}
flights_delayed3 <- top_n(flights, 10, dep_delay)
flights_delayed3 <- arrange(flights_delayed3, desc(dep_delay))
select(flights_delayed3, month, day, carrier, flight, dep_delay)
```


What does 1:3 + 1:10 return? Why?

```{r}
1:3 + 1:10


# Operation is like;
c(1 + 1, 2 + 2, 3 + 3, 1 + 4, 2 + 5, 3 + 6, 1 + 7, 2 + 8, 3 + 9, 1 + 10)
```


What trigonometric functions does R provide?

*Answer:All trigonometric functions are all described in a single help page, named Trig. You can open the documentation for these functions with ?Trig or by using ? with any of the following functions, for example:?sin.*

*R provides functions for the three primary trigonometric functions: sine (sin()), cosine (cos()), and tangent (tan()). The input angles to all these functions are in radians.*

5.6: grouped summaries

5.7: Grouped mutated (and filters)

```{r}
flights %>% 
  group_by(dest) %>% 
  summarise(
    count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) %>% 
  filter(count > 20, dest == "HNL")
```

Brainstorm at least 5 different ways to assess the typical delay characteristics of a group of flights. Consider the following scenarios:

  - A flight is 15 minutes early 50% of the time, and 15 minutes late 50% of the time.

  - A flight is always 10 minutes late.

  - A flight is 30 minutes early 50% of the time, and 30 minutes late 50% of the time.

  - 99% of the time a flight is on time. 1% of the time it’s 2 hours late.

Which is more important: arrival delay or departure delay?

Come up with another approach that will give you the same output as not_cancelled %>% count(dest) and not_cancelled %>% count(tailnum, wt = distance) (without using count()).
```{r}
not_cancelled <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay))
```

```{r}
#First expression; 
 not_cancelled %>% count(dest)
```

```{r}
#We need to use group_by + tally()
not_cancelled %>%
  group_by(dest) %>%
  tally()
```


```{r}
# 2nd expression
not_cancelled %>% count(tailnum, wt = distance)
```

```{r}
#We need to use group_by + tally()
not_cancelled %>%
  group_by(tailnum) %>%
  tally(distance)
```

Our definition of cancelled flights (is.na(dep_delay) | is.na(arr_delay) ) is slightly suboptimal. Why? Which is the most important column?

*Answer: If a flight never departs, then it won’t arrive. A flight could also depart and not arrive if it crashes, or if it is redirected and lands in an airport other than its intended destination. So the most important column is arr_delay, which indicates the amount of delay in arrival.*

```{r}
filter(flights, !is.na(dep_delay), is.na(arr_delay)) %>%
  select(dep_time, arr_time, sched_arr_time, dep_delay, arr_delay)
```


Look at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the average delay?

```{r}
# Determine the total cancelled flights by day
cancelled_per_day <- 
  flights %>%
  mutate(cancelled = (is.na(arr_delay) | is.na(dep_delay))) %>% #create cancelled flights
  group_by(year, month, day) %>%
  summarise(
    cancelled_num = sum(cancelled),
    flights_num = n(),
  )

ggplot(cancelled_per_day, aes(flights_num, cancelled_num)) + 
  geom_point()
```


```{r}
# Look for AVG delay in each day
cancelled_and_delays <- 
  flights %>%
  mutate(cancelled = (is.na(arr_delay) | is.na(dep_delay))) %>%
  group_by(year, month, day) %>%
  summarise(
    cancelled_prop = mean(cancelled),
    avg_dep_delay = mean(dep_delay, na.rm = TRUE),
    avg_arr_delay = mean(arr_delay, na.rm = TRUE)
  )

cancelled_and_delays

```

```{r}
ggplot(cancelled_and_delays) +
  geom_point(aes(x = avg_dep_delay, y = cancelled_prop))
```

Which carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights %>% group_by(carrier, dest) %>% summarise(n()))

```{r}

```

What does the sort argument to count() do. When might you use it?

*Answer: The sort argument to count() sorts the results in order of n. You could use this anytime you would run count() followed by arrange().For example, the following expression counts the number of flights to a destination and sorts the returned data from highest to lowest.* 






