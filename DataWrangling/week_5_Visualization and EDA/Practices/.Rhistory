summarise(
cancelled_prop = mean(cancelled),
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
ungroup()
ggplot(cancelled_and_delay) +
geom_point(aes(x = avg_dep_delay, y = cancelled_prop))
# Look for AVG delay in each day
cancelled_and_delays <-
flights %>%
mutate(cancelled = (is.na(arr_delay) | is.na(dep_delay))) %>%
group_by(year, month, day) %>%
summarise(
cancelled_prop = mean(cancelled),
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)
cancelled_and_delays
ggplot(cancelled_and_delays) +
geom_point(aes(x = avg_dep_delay, y = cancelled_prop))
flights %>%
group_by(carrier, dest) %>%
summarise((n()))
flights %>%
group_by(carrier, dest) %>%
summarise(
(n(),
flights %>%
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay)
)
flights %>%
filter() %>% #remove n.a
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay, rm.na = TRUE)
)
flights %>%
filter(!is.na(avg_delay)) %>% #remove n.a
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay, rm.na = TRUE)
)
flights %>%
filter(!is.na(dep_delay)) %>% #remove n.a
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay, rm.na = TRUE)
)
flights %>%
filter(!is.na(dep_delay)) %>% #remove n.a
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay)
)
delays_carr_dest <- flights %>%
filter(!is.na(dep_delay)) %>% #remove N/A => only flights with delays
group_by(carrier, dest) %>%
summarise(
n(),
avg_delay = mean(dep_delay)
)
delays_carr_dest
#plot Carries
ggplot(delays_carr_dest, aes(carrier)) +
geom_bar()
#plot Carries
ggplot(delays_carr_dest, aes(carrier, avg_delay_day)) +
geom_point()
#plot Carries
ggplot(delays_carr_dest, aes(carrier, avg_delay)) +
geom_point()
#plot Carries
ggplot(delays_carr_dest, aes(carrier, avg_delay)) +
geom_boxplot()
#plot Dest
ggplot(delays_carr_dest, aes(dest, avg_delay)) +
geom_boxplot()
# plot dest x carrier
#plot Dest
ggplot(delays_carr_dest, aes(carrier, dest)) +
geom_point()
# plot dest x carrier
#plot Dest
ggplot(delays_carr_dest, aes(carrier, dest)) +
geom_boxplot()
#Looking for avg delays, groupby carrier and dest
delays_carr_dest <- flights %>%
filter(!is.na(dep_delay)) %>% #remove N/A => only flights with delays
group_by(origin,dest,carrier) %>%
summarise(
n(),
avg_delay = mean(dep_delay)
)
delays_carr_dest
#Looking for avg delays, groupby carrier and dest
delays_carr_dest <- flights %>%
filter(!is.na(arr_delay)) %>% #remove N/A => only flights with delays
group_by(origin,dest,carrier) %>%
summarise(
flights = n(),
arr_delay = sum(arr_delay)
avg_delay = arr_delay / flights
#Looking for avg delays, groupby carrier and dest
delays_carr_dest <- flights %>%
filter(!is.na(arr_delay)) %>% #remove N/A => only flights with delays
group_by(origin,dest,carrier) %>%
summarise(
flights = n(),
arr_delay = sum(arr_delay),
avg_delay = arr_delay / flights
)
delays_carr_dest
flights %>%
filter(!is.na(arr_delay)) %>%
# Total delay by carrier within each origin, dest
group_by(origin, dest, carrier) %>%
summarise(
arr_delay = sum(arr_delay),
flights = n()
) %>%
# Total delay within each origin dest
group_by(origin, dest) %>%
mutate(
arr_delay_total = sum(arr_delay),
flights_total = sum(flights)
) %>%
# average delay of each carrier - average delay of other carriers
ungroup() %>%
mutate(
arr_delay_others = (arr_delay_total - arr_delay) /
(flights_total - flights),
arr_delay_mean = arr_delay / flights,
arr_delay_diff = arr_delay_mean - arr_delay_others
) %>%
# remove NaN values (when there is only one carrier)
filter(is.finite(arr_delay_diff)) %>%
# average over all airports it flies to
group_by(carrier) %>%
summarise(arr_delay_diff = mean(arr_delay_diff)) %>%
arrange(desc(arr_delay_diff))
#plot Carries
ggplot(delays_carr_dest, aes(carrier, avg_delay)) +
geom_boxplot()
#plot Dest
ggplot(delays_carr_dest, aes(dest, avg_delay)) +
geom_boxplot()
flights %>%
group_by(hour) %>%
summarise(
delay = mean(arr_delay)
)
flights %>%
group_by(hour) %>%
summarise(
delay = mean(is.na(arr_delay))
)
flights %>%
group_by(hour) %>%
summarise(
delay = mean(is.na(arr_delay))) %>%
arrange(delay)
flights %>%
group_by(hour) %>%
summarise(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(arr_delay)
flights %>%
group_by(hour) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE))) %>%
flights %>%
group_by(hour) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(delay)
flights %>%
filter(arr_delay > 0)
flights %>%
filter(arr_delay > 0) %>%
groupby(arr_delay, dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(arr_delay, dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(arr_delay, dest) %>%
summarise(
delays = sum(arr_delay)
)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
summarise(
delays = sum(arr_delay)
)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) )
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, delays)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, delays) %>%
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
summarise() +
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
summarise(sum(delays)) +
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
summarise(sum(delays)) %>%
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
summarise(tt_delay = sum(delays)) %>%
arrange(dest)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
select(dest, month, day, dep_time, carrier, flight,
arr_delay) %>%
summarise(tt_delay = sum(delays))
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
summarise(tt_delay = sum(delays))
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
summarise()
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
summarise(delays)
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
summarise(sum(delays) )
#total delay time by dest
flights %>%
filter(arr_delay > 0) %>%
group_by(dest) %>%
mutate( delays = sum(arr_delay) ) %>%
summarise(sum(delays) )
library("nycflights13")
library("tidyverse")
str(diamonds)
ggplot(diamonds, aes(x))+
geom_histogram()
ggplot(diamonds, aes(x))+
geom_histogram() +
theme_minimal()
ggplot(diamonds, aes(x), color = "blue")+
geom_histogram() +
theme_minimal()
ggplot(diamonds, aes(x), colour = "blue")+
geom_histogram() +
theme_minimal()
ggplot(diamonds, aes(x))+
geom_histogram(color = "blue") +
theme_minimal()
ggplot(diamonds, aes(x))+
geom_histogram(fill = "blue") +
theme_minimal()
ggplot(diamonds, aes(x))+
geom_histogram(fill = " dark blue") +
theme_minimal()
ggplot(diamonds, aes(x))+
geom_histogram(fill = " light dark blue") +
theme_minimal()
ggplot(diamonds, aes(x))+
geom_histogram(fill = "dark blue") +
theme_minimal()
ggplot(diamonds, aes(y))+
geom_histogram(fill = "dark blue") +
theme_minimal()
ggplot(diamonds, aes(z))+
geom_histogram(fill = "dark blue") +
theme_minimal()
ggplot(diamonds, aes(z))+
geom_histogram(fill = "dark red") +
theme_minimal()
ggplot(diamonds, aes(y))+
geom_histogram(fill = "dark green") +
theme_minimal()
#SOme summary statistics
summary(select(diamonds, x, y, z))
?diamonds
view(diamonds)
ggplot(diamonds, aes(price))+
geom_histogram()
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 10)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 5)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 30)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 10)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 1)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 500)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim = 1000)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim = 5000)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian()
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(xlim=1000)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim=1000)
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim= c(0,1000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim= c(0,500))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim= c(0,100))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 100)+
coord_cartesian(ylim= c(0,1000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 50)+
coord_cartesian(ylim= c(0,1000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 50, center = 0)+
coord_cartesian(ylim= c(0,1000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 50, center = 0)+
coord_cartesian(ylim= c(0,1000), xlim=(0,2000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 50, center = 0)+
coord_cartesian(ylim= c(0,1000), xlim=c(0,2000))
ggplot(diamonds, aes(price))+
geom_histogram(binwidth = 10, center = 0)+
coord_cartesian(ylim= c(0,1000), xlim=c(0,2000))
ggplot(diamonds, aes(carat))+
geom_histogram()
diamonds %>%
filter(carat>0.98 & carat <1.01)
ggplot(diamonds, aes(carat))+
geom_histogram()
diamonds %>%
filter(carat>0.98 & carat <1.01)
ggplot(aes(carat))+
geom_histogram()
diamonds %>%
filter(carat>0.98 & carat <1.01) %>%
ggplot(aes(carat))+
geom_histogram()
#showing the values
diamonds %>%
filter(carat >= 0.99, carat <= 1) %>%
count(carat)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price)) +
coord_cartesian(xlim = c(100, 5000), ylim = c(0, 3000))
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price)) +
xlim(100, 5000) +
ylim(0, 3000)
flights %>%
mutate(
cancelled = is.na(dep_time),
sch_dep = sched_dep_time %/% 100,
sch_dep_min = sched_dep_time %% 100,
sche = sch_dep + sch_dep_min / 60
) %>%
ggplot(aes(x = sche, y = cancelled)) +
geom_boxplot()
head(diamond)
head(diamonds)
#Carat vs Price
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot()
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=cut_width(carat, bins=20), y = price))+
geom_boxplot()
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x= cut_width(carat, 20), y = price))+
geom_boxplot()
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x= group=  cut_width(carat, 20), y = price))+
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes( group =  cut_width(carat, 20), y = price))+
geom_boxplot()
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, bins=20), y = price))+
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, bins=20), y = price)+
geom_boxplot(group=cut_width(carat,0.5))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, bins=20), y = price)+
geom_boxplot(group=cut_width(carat,0.1))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, bins=20), y = price)+
geom_boxplot(aes(group=cut_width(carat,0.1)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, bins=20), y = price)+
geom_boxplot(aes(group=cut_width(carat,0.5)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price)+
geom_boxplot(aes(group=cut_width(carat,0.5)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot(aes(group=cut_width(carat,0.5)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot(aes(group=cut_width(carat,0.1)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot(aes(group=cut_width(carat,0.2)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot(aes(group=cut_width(carat,0.1)))
#Carat vs Price but with boxplot (One continuos cutted with bins)
ggplot(diamonds, aes(x=carat, y = price))+
geom_boxplot(aes(group=cut_width(carat,0.2)))
ggplot(aes(x=cut, y=price))+
geom_boxplot()
ggplot(diamonds, aes(x=cut, y=price))+
geom_boxplot()
)
#Color vs Price, negative correlation (1 continuos x 1 categorical)
ggplot(diamonds, aes(x=color, y=price))+
geom_boxplot(
#Cut vs Price, negative correlation (1 continuos x 1 categorical)
ggplot(diamonds, aes(x=cut, y=price))+
geom_boxplot()
#Color vs Price, negative correlation (1 continuos x 1 categorical)
ggplot(diamonds, aes(x=color, y=price))+
geom_boxplot()
#Color vs Price, negative correlation (1 continuos x 1 categorical)
ggplot(diamonds, aes(x=color, y=price))+
geom_boxplot()+
theme_minimal()
#Color vs Price, negative correlation (1 continuos x 1 categorical) => this is dificult to visualise but there is a very light negative correlation (color J is the worst)
ggplot(diamonds, aes(x=clarity, y=price))+
geom_boxplot()+
theme_minimal()
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex() +
facet_wrap(~cut, ncol = 1)
