centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2")
while ((centroid1_new != centroid1) & centroid2_new != centroid2) {
#assign centroids
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
for (val in 1:nrow(df)) {
var <- df[val,1:2] #store position of each element to compare with centroid
dist1 = dist(rbind(var, centroid1), method="euclidean")
dist2 = dist(rbind(var, centroid2), method="euclidean")
df[val, 3] = case_when(dist1 <= dist2 ~ 1, dist2 < dist1 ~ 2)
}
#iterating with visuals
ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2")
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1_new <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2_new <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
}
df
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2")
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2")
while ((centroid1_new != centroid1) & centroid2_new != centroid2) {
#assign centroids
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
for (val in 1:nrow(df)) {
var <- df[val,1:2] #store position of each element to compare with centroid
dist1 = dist(rbind(var, centroid1), method="euclidean")
dist2 = dist(rbind(var, centroid2), method="euclidean")
df[val, 3] = case_when(dist1 <= dist2 ~ 1, dist2 < dist1 ~ 2)
}
#iterating with visuals
print(ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2"))
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1_new <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2_new <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
}
df
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1))+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aex(1,4), color = "red")+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(1,4), color = "red")+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(2,4), color = "red")+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(2,4), color = "red", size=2)+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(2,4), color = "red", size=4)+ theme_minimal()+ggtitle("Simple plot X1 and X2")
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$x2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$x2), color = "green", size=4) + theme_minimal()+ggtitle("Simple plot X1 and X2")
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$X2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$X2), color = "green", size=4) + theme_minimal()+ggtitle("Simple plot X1 and X2")
while ((centroid1_new != centroid1) & centroid2_new != centroid2) {
#assign centroids
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
for (val in 1:nrow(df)) {
var <- df[val,1:2] #store position of each element to compare with centroid
dist1 = dist(rbind(var, centroid1), method="euclidean")
dist2 = dist(rbind(var, centroid2), method="euclidean")
df[val, 3] = case_when(dist1 <= dist2 ~ 1, dist2 < dist1 ~ 2)
}
#iterating with visuals
print(ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2"))
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1_new <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2_new <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
}
df
#generate df
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=6, replace=TRUE))
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$X2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$X2), color = "green", size=4) + theme_minimal()+ggtitle("Initial Plot")
while ((centroid1_new != centroid1) & centroid2_new != centroid2) {
#assign centroids
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
for (val in 1:nrow(df)) {
var <- df[val,1:2] #store position of each element to compare with centroid
dist1 = dist(rbind(var, centroid1), method="euclidean")
dist2 = dist(rbind(var, centroid2), method="euclidean")
df[val, 3] = case_when(dist1 <= dist2 ~ 1, dist2 < dist1 ~ 2)
}
#iterating with visuals
print(
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$X2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$X2), color = "green", size=4) + theme_minimal()+ggtitle("Iterative PLOT")
)
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1_new <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2_new <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
}
df
ggplot(df, aes(X1,X2,color=label)) + geom_point() + theme_minimal()+ggtitle("Simple plot X1 and X2")
#generate df
X1 <- c(1,1,0,5,6,4,6,7,2,4,6,7,8,9,0,2)
X2 <- c(4,3,4,1,2,0,3,5,1,3,8,2,3,1,9,2)
df <- tibble(X1=X1,X2=X2)
#assign random labels
df <- df %>%
mutate('label' = sample.int(2, size=nrow(df), replace=TRUE))
#initialize first time
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
centroid1_new = 0
centroid2_new = 0
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$X2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$X2), color = "green", size=4) + theme_minimal()+ggtitle("Initial Plot")
while ((centroid1_new != centroid1) & centroid2_new != centroid2) {
#assign centroids
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1 <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2 <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
for (val in 1:nrow(df)) {
var <- df[val,1:2] #store position of each element to compare with centroid
#evaluate distance of each obs x each centroid
dist1 = dist(rbind(var, centroid1), method="euclidean")
dist2 = dist(rbind(var, centroid2), method="euclidean")
#assign label to the closest distance!
df[val, 3] = case_when(dist1 <= dist2 ~ 1, dist2 < dist1 ~ 2)
}
#iterating with visuals
print(
ggplot(df, aes(X1,X2,color=label)) + geom_point() + geom_point(aes(centroid1$X1, centroid1$X2), color = "red", size=4) + geom_point(aes(centroid2$X1, centroid2$X2), color = "green", size=4) + theme_minimal()+ggtitle("Iterative PLOT")
)
cluster1 <- filter(df, df$label == 1)
cluster2 <- filter(df, df$label == 2)
centroid1_new <- tibble("X1" = mean(cluster1$X1), "X2" = mean(cluster1$X2))
centroid2_new <- tibble("X1" = mean(cluster2$X1), "X2" = mean(cluster2$X2))
}
df
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
x <- 1,2,3,4
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
x <- c(1,2,3,4)
y <- c(1,2,3,4)
l2_dist(x,y)
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
x <- c(1,2,3,4)
y <- c(1,2,3,8)
l2_dist(x,y)
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
x <- c(1,2,3,4)
y <- c(1,2,3,8)
l2_dist(x,y)
l2_dist <- function (x, y) {
return (dist(rbind(x,y)))
}
x <- c(1,2,3,4)
y <- c(1,4,3,8)
l2_dist(x,y)
l2_dist <- function (x, y) {
return (dist(rbind(x,y), method="euclidean"))
}
x <- c(1,2,3,4)
y <- c(1,4,3,8)
l2_dist(x,y)
l2_dist <- function (x, y) {
return (dist(rbind(x,y), method="euclidean"))
}
x <- c(3,4)
y <- c(1,4,3,8)
l2_dist(x,y)
X1 <- c(1,1,0,5,6,4,6,7,2,4,6,7,8,9,0,2)
X2 <- c(4,3,4,1,2,0,3,5,1,3,8,2,3,1,9,2)
X <- tibble(X1=X1,X2=X2)
kmedioids <- function(X, K) {
labels = 0
df <- X
#assign random labels
df <- df %>%
mutate('label' = sample.int(K, size=nrow(df), replace=TRUE))
labels = df$label
return(labels)
}
kmedioids(X,2)
kmedioids(X,2)
kmedioids(X,2)
kmedioids(X,2)
ncol(df)
col(df)
library(MASS) # make sure to load mass before tidyverse to avoid conflicts!
library(tidyverse)
#install.packages("patchwork")
library(patchwork)
library(ggdendro)
library(mclust)
df <- as_tibble(banknote)
head(df)
ggplot(df, aes(Left, Right, color=Status))+geom_jitter()
#We can see there is overlaping in classes considering only this 2 features, so no clear distinguishing
df_unlabel <- df[,2:7]
head(df_unlabel)
(ggplot(df_unlabel )+
geom_density(aes(x=Length)) ) +
(ggplot(df_unlabel )+
geom_density(aes(x=Left)) ) +
(ggplot(df_unlabel )+
geom_density(aes(x=Right)) ) +
(ggplot(df_unlabel )+
geom_density(aes(x=Bottom)) ) +
(ggplot(df_unlabel )+
geom_density(aes(x=Top)) ) +
(ggplot(df_unlabel )+
geom_density(aes(x=Diagonal)) )
#Diagonal seems to have a non-normal distribution, so this can explain Clusters better, probably there is two normal distributions (clusters)
(ggplot(df )+
geom_density(aes(x=Diagonal, color=Status)) ) + theme_minimal()
#As we imagine, indeed there is 2 normal distribution explaining the classes
(ggplot(df )+
geom_density(aes(x=Length, color=Status)) ) + theme_minimal()
class <- df_unlabel[,6]
fit <- Mclust(class)
summary(fit)
plot(fit, what="BIC")
#fit_E_2$parameters
class <- df_unlabel[,6]
fit_E_2 <- Mclust(class, modelNames = c("E"), G=2)
summary(fit_E_2)
fit_E_2$parameters
#stored
fit_E_2$bic
#parameters
fit_E_2$parameters
#k = 2 (2 clusters)
#p = 1 (variable)
#the parameters are (1 class probability pi, 2 means, and 1 variance)
#from book (we can see 4 parameters)
fit_E_2$loglik
plot(fit_E_2, what="BIC")
plot(fit_E_2, what="density")
# add the observations using rug marks
rug(df_unlabel %>% pull(Diagonal))
class <- df_unlabel[,6]
fit_V_2 <- Mclust(class, modelNames = c("V"), G=2)
summary(fit_V_2)
fit_V_2$parameters
plot(fit_V_2, what="BIC")
plot(fit_V_2, what="density")
# add the observations using rug marks
rug(df_unlabel %>% pull(Diagonal))
fit_V_2$parameters
# 1 class probability (pi)
# 2 means
# 2 variances
#deviance = -2 * log(l)
-2*fit_E_2$loglik
-2*fit_V_2$loglik
fit_E_2$bic
fit_V_2$bic
fit_multi <- Mclust(df_unlabel)
summary(fit_multi)
plot(fit_multi, what="BIC")
fit_multi$parameters
# 3 clusters * 6 variables = 18 mean parameters
fit_multi$parameters$mean
# 3 clusters * 6 variables = 18 mean parameters
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VVV"))
plot(fit_multi_VVV, what="density")
ggplot(df, aes(Left, Right, color=fit_multi_VVV$classification, size=fit_multi_VVV$uncertainty))+geom_jitter()
#now with the best separation between features
ggplot(df, aes(Top, Diagonal, color=fit_multi_VVV$classification, size=fit_multi_VVV$uncertainty))+geom_jitter()
#stored
fit_E_2$bic
#parameters
fit_E_2$parameters
#k = 2 (2 clusters)
#p = 1 (variable)
#the parameters are (1 class probability pi, 2 means, and 1 variance)
#from book (we can see 4 parameters)
-2*fit_E_2$loglik
#stored
fit_E_2$bic
#parameters
fit_E_2$parameters
#k = 2 (2 clusters)
#p = 1 (variable)
#the parameters are (1 class probability pi, 2 means, and 1 variance)
#from book (we can see 4 parameters)
-2*fit_E_2$loglik + log(nrow(df))*4
nrow(df)
log(200)
ggplot(df, aes(Left, Right, color=as_factor(fit_multi_VVV$classification), size=fit_multi_VVV$uncertainty))+geom_jitter()
#now with the best separation between features
ggplot(df, aes(Top, Diagonal, color=as_factor(fit_multi_VVV$classification), size=fit_multi_VVV$uncertainty))+geom_jitter()
fit_E_2$parameters
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$parameters$variance$Sigma
fit_3$parameters
summary(fit_3)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_3$parameters$variance$Sigma
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVE")
fit_3$parameters$variance$Sigma
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EVV")
fit_3$parameters$variance$Sigma
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EVV")
fit_3$parameters
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_3$parameters
summary(fit_3)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_3$df
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VEV")
fit_3$df
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EVV")
fit_3$df
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_4$df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_4$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EVV")
fit_4$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VEV")
fit_4$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVE")
fit_4$df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VVV")
fit_4$df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"VEV")
fit_4$df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_3$df
fit_4 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EVE")
fit_4$df
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
df <- tibble(x1=x1,x2=x2)
k2 <- kmeans(df, centers=3)
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
df <- tibble(x1=x1,x2=x2)
k2 <- kmeans(df, centers=3)
k2$cluster
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
df <- tibble(x1=x1,x2=x2)
k2 <- kmeans(df, centers=3)
k2$cluster
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
df <- tibble(x1=x1,x2=x2)
k2 <- kmeans(df, centers=3)
k2$cluster
x1 <- c(5.1,4.8,-2,5,-0.3,0.1)
x2 <- c(3.6,4.9,-0.1,4.7,0.4,-0.3)
df <- tibble(x1=x1,x2=x2)
k2 <- kmeans(df, centers=3)
k2$cluster
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
#Example from the book
X1 <- c(1,1,0,5,6,4)
X2 <- c(4,3,4,1,2,0)
df <- tibble(X1=X1,X2=X2)
df
#looking for number of parameters (3 clusters and 3 features)
fit_3 <-  Mclust(df %>% select(Diagonal, Left, Right), G = 2,"EEE")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VEV"))
plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VVV"))
plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VEV"))
sumary(fit_multi_VVV)
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VEV"))
summary(fit_multi_VVV)
plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VEV"))
summary(fit_multi_VVV)
#plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("EVE"))
summary(fit_multi_VVV)
#plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel, G=2, modelNames = c("VVV"))
#summary(fit_multi_VVV)
plot(fit_multi_VVV, what="density")
fit_multi_VVV <- Mclust(df_unlabel[,1:3], G=2, modelNames = c("VVV"))
fit_multi_XXX <- Mclust(df_unlabel[,1:3], G=2, modelNames = c("VVV"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("VVV"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("EVE"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("EEE"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("VVV"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("EVE"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("VVE"))
summary(fit_multi_XXX)
fit_multi_XXX <- Mclust(df_unlabel[,1:2], G=3, modelNames = c("VVV"))
summary(fit_multi_XXX)
