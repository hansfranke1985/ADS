---
title: "Assigment 2"
subtitle: "Assigment 2"
author: "Hans Franke"
date: "October 13, 2020"
output: rmarkdown::github_document
---

```{r}
#loading libraries
library(tidyverse)
library(mice)
library(dplyr)
```

In this assignment, we will again use the nhanes dataset from the mice package.

Prepare a data frame for complete case analysis. Call this data frame df_cc.

```{r}
?nhanes

df <- nhanes
df_cc <- na.omit(df) #omiting the n/a values
df_cc
```


Prepare a dataset by performing mean imputation. Again, give this dataset a reasonable name.

```{r}
#compute the mean
imp_mean <- mice(df, method = "mean", m = 1, maxit = 1)

#put on new df to store the missing values as mean values of each colum
df_mean <- complete(imp_mean)
df_mean
```


Hint: use the replace_na() function from the dplyr package in the tidyverse

For these two datasets, compute the mean and variance for each feature. Show how they differ! Are they the same? Explain why the variance in the chl feature is lower in the mean imputed dataset.
```{r}
var(df)
```

```{r}
#Comparison var ( As u can imagine if u are inputing values as MEAN, the variance will decrease because more points will become "closer to the mean")

var(df_cc)
```
```{r}
var(df_mean)
```


# Assignment
Perform regression imputation on the fdgs dataset according to the following paragraph, and compute the estimate of the population mean. (NB: the paragraph is the example answer from the last exercise in the previous assignment)

Since the goal is to estimate the mean weight of the population, and we assume MAR, we have to impute (complete case analysis is only unbiased under MCAR). Regression imputation will work fine for this purpose. For the imputation model, I would create a linear model with wgt as the outcome. The model will include all variables (except id, and hgt.z) and also a quadratic effect of age (as weight will probably increase less as the child gets older). Then, I can impute the predicted values for the missing weight cells. The sample mean will then be the estimate of the population mean.

```{r}
#loading and look for summaries
md.pattern(fdgs)
```

```{r}
#Original
df_fdgs <- fdgs

#df without n/a
df_fdgs_cc <- na.omit(df_fdgs)

#df with mean imputation
imp_mean <- mice(df_fdgs, method = "mean", m = 1, maxit = 1)
df_fgds_mean <- complete(imp_mean)

#look for df`s

md.pattern( df_fgds_mean)
```

```{r}

#df with regression imputation Using mice

df_fgds_reg <- df_fdgs

imp <- mice(df_fgds_reg, method = "norm.predict", seed = 1,
           m = 1, print = FALSE)
xyplot(imp, wgt ~ age )
```

```{r}
#df with reg manually (u have to use df without the n/a)

df_fdgs_age2 <- df_fdgs %>%
  mutate( age2 = age ** 2) # elevate age to quadratic as question suggests

multi.fit = lm(wgt~reg+age2+sex+hgt, data=df_fdgs_age2)
summary(multi.fit)

```

```{r}
#predict some values
value <- data.frame(
  reg = c("North"),
  age2 = c(20),
  sex = c("girl"),
  hgt = c(30)
)

pred2 <- predict(multi.fit, value)
pred2

```



```{r}
# Use fit to predict the value
df3 <- df_fdgs_age2 %>% 
  #create a pred column to compare with original
  mutate(pred = predict(multi.fit, .)) %>%
  # Replace NA with pred in var1
  mutate(wgt = ifelse(is.na(wgt), pred, wgt))

# See the result
head(df3)

```

```{r}
#show original df just to compare
df_fdgs[rowSums(is.na(df_fdgs)) > 0,]
```



```{r}
#look at 3 indexes to compare the values with original df
ids <- df_fdgs[rowSums(is.na(df_fdgs)) > 0,1] #picking every ids with n/a values

filter(df3, id == 100984)


```

```{r}
md.pattern(df3)
```

```{r}
#lookinf for the mean, removing N/A of the hgt colum
mean(df3$wgt)

```

```{r}
mean(df_fdgs_cc$wgt)
```


Extra challenge: now, using the same model, perform stochastic regression imputation (norm.nob) as explained in section 1.3.5 of FIMD and compute the sample mean of weight. Do it again. Is the result the same? What does this variation in the sample mean represent?