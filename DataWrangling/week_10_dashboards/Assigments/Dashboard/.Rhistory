mainPanel(
dataTableOutput('table')
)
)
),
# Third tab content
tabItem(tabName = "od",
tabsetPanel(
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Statistical Outlier Detection",  "TODO: implement distance-based outlier detection"),
tabPanel("Distance-Based Outleir Detection", "TODO: implement distance-based outlier detection")
),
),
# Fourth tab content
tabItem(tabName = "cluster",
sliderInput(inputId = "num_k",
label = "Chose a Number",
value = 4, step=1,
min = 1, max = 10),
tabsetPanel(
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset2",
tabPanel("kmeans",  mainPanel(
plotOutput('kmeans')
)),
tabPanel("DBSCAN", "TODO: implement DBSCAN clustering demo")
),
)
)
)
)
s <- function(input, output) {
#This function is repsonsible for loading in the selected file
filedata <- reactive({
infile <- input$datafile
if (is.null(infile)) {
# User has not uploaded a file yet
return(NULL)
}
read.csv(infile$datapath)
})
#The following set of functions populate the column selectors
output$expCol <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput(inputId = "selectedCol", label = "Seclect Column:",items)
})
output$expCol2 <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput(inputId = "selectedCol2", label = "Seclect Column:",items)
})
#text to publish app online (users might download the same .csv file)
output$download <- renderUI({
url <- a("Link", href="https://github.com/hansfranke1985/ADS/blob/master/DataWrangling/week_10_dashboards/Assigments/Dashboard/pid.csv")
tagList("Please download an example file pid.csv", url)
})
# output$download <- renderText("Please download example file https://github.com/hansfranke1985/ADS/blob/master/DataWrangling/week_10_dashboards/Assigments/Dashboard/pid.csv")
#This previews the CSV data file
output$filetable <- DT::renderDataTable({
df <-filedata()
if (is.null(df)) return(NULL)
data.frame(names(df))
}
)
# This renders the scatter plot for the selected column
output$scatterPlot <- renderPlot({
df <-filedata()
if (is.null(df)) return(NULL)
if (input$visStyle == 'Scatter'){
selectedData <- df[, input$selectedCol]
if(is.numeric(selectedData)){
plot(selectedData, pch = as.numeric(input$shape), col = as.numeric(input$color),
cex = as.numeric(input$msize), lwd = input$lwidth)
}
else{
return(NULL)
}
}
else{
return(NULL)
}
})
# This renders the histogramn plot for the selected column
output$histPlot <- renderPlot({
df <-filedata()
if (is.null(df)) return(NULL)
if (input$visStyle == 'Histogram'){
selectedData <- df[, input$selectedCol2]
if (is.numeric(selectedData)){
hist(selectedData, breaks = as.numeric(input$n_bins))
}
else{
return(NULL)
}
}
else{
return(NULL)
}
})
output$table <- renderDT({
df <-filedata()
df
})
# This runs KMeans
output$kmeans <- renderPlot({
df <- filedata()
means <- kmeans(df, centers = input$num_k)
df <- df %>%
mutate("labels" = as_factor(means$cluster),
)
(ggplot(df, aes(A,B, color=labels))+geom_point())
})
#this runs DBSCAN
}
shinyApp(ui = u, server = s)
runApp()
runApp()
runApp()
shinyApp(ui = u, server = s)
runApp()
##########################################################
######## Example 5: Different Data Visualization Styles ##
##########################################################
library(shiny)
library(shinydashboard)
library(DT)
library(tidyverse)
##  content
u <- dashboardPage(
dashboardHeader(title = "My Dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Select Data", tabName = "load"),
menuItem("Data Exploration", tabName = "explore"),
menuItem("Outlier Detection", tabName = "od"),
menuItem("Clustering", tabName = "cluster")
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "load",
sidebarPanel(
#Selector for file upload
#textInput(inputId = "download", 'Please download'),
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv'))
),
mainPanel(
uiOutput("download"),
DT::dataTableOutput("filetable")
)
),
# Second tab content
tabItem(tabName = "explore",
selectInput("visStyle", "Visualization Style", c("Select an option .. ", "Scatter", "Histogram", "Tabular")),
conditionalPanel(condition = "(input.visStyle == 'Scatter')",
sidebarPanel(
uiOutput("expCol"),
selectInput(inputId = 'shape', label = "Point Shape", seq(from = 1, to = 20), selected = 5),
selectInput(inputId = 'color', label = "Point Color", seq(from = 1, to = 20), selected = 2),
selectInput(inputId = 'msize', label = "Marker Size", seq(from = 1, to = 10), selected = 2),
selectInput(inputId = 'lwidth', label = "Border Line Width", seq(from = 1, to = 10), selected = 2)
),
mainPanel(
plotOutput('scatterPlot')
),
),
conditionalPanel(condition = "(input.visStyle == 'Histogram')",
sidebarPanel(
uiOutput("expCol2"),
sliderInput(inputId = 'n_bins', label = 'Number of histogram bins', value = 20,
min = 5, max = 25, step = 5)
),
mainPanel(
plotOutput('histPlot')
)
),
conditionalPanel(condition = "(input.visStyle == 'Tabular')",
mainPanel(
dataTableOutput('table')
)
)
),
# Third tab content
tabItem(tabName = "od",
tabsetPanel(
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1",
tabPanel("Statistical Outlier Detection",  "TODO: implement distance-based outlier detection"),
tabPanel("Distance-Based Outleir Detection", "TODO: implement distance-based outlier detection")
),
),
# Fourth tab content
tabItem(tabName = "cluster",
sliderInput(inputId = "num_k",
label = "Chose a Numberxdd",
value = 4, step=1,
min = 1, max = 10),
tabsetPanel(
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset2",
tabPanel("kmeans",
sidebarPanel(
uiOutput("expCol2"),
uiOutput('expCol')
),
mainPanel(
plotOutput('kmeans')
)),
tabPanel("DBSCAN", "TODO: implement DBSCAN clustering demo")
),
)
)
)
)
s <- function(input, output) {
#This function is repsonsible for loading in the selected file
filedata <- reactive({
infile <- input$datafile
if (is.null(infile)) {
# User has not uploaded a file yet
return(NULL)
}
read.csv(infile$datapath)
})
#The following set of functions populate the column selectors
output$expCol <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput(inputId = "selectedCol", label = "Seclect Column:",items)
})
output$expCol2 <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput(inputId = "selectedCol2", label = "Seclect Column:",items)
})
#text to publish app online (users might download the same .csv file)
output$download <- renderUI({
url <- a("Link", href="https://github.com/hansfranke1985/ADS/blob/master/DataWrangling/week_10_dashboards/Assigments/Dashboard/pid.csv")
tagList("Please download an example file pid.csv", url)
})
# output$download <- renderText("Please download example file https://github.com/hansfranke1985/ADS/blob/master/DataWrangling/week_10_dashboards/Assigments/Dashboard/pid.csv")
#This previews the CSV data file
output$filetable <- DT::renderDataTable({
df <-filedata()
if (is.null(df)) return(NULL)
data.frame(names(df))
}
)
# This renders the scatter plot for the selected column
output$scatterPlot <- renderPlot({
df <-filedata()
if (is.null(df)) return(NULL)
if (input$visStyle == 'Scatter'){
selectedData <- df[, input$selectedCol]
if(is.numeric(selectedData)){
plot(selectedData, pch = as.numeric(input$shape), col = as.numeric(input$color),
cex = as.numeric(input$msize), lwd = input$lwidth)
}
else{
return(NULL)
}
}
else{
return(NULL)
}
})
# This renders the histogramn plot for the selected column
output$histPlot <- renderPlot({
df <-filedata()
if (is.null(df)) return(NULL)
if (input$visStyle == 'Histogram'){
selectedData <- df[, input$selectedCol2]
if (is.numeric(selectedData)){
hist(selectedData, breaks = as.numeric(input$n_bins))
}
else{
return(NULL)
}
}
else{
return(NULL)
}
})
output$table <- renderDT({
df <-filedata()
df
})
# This runs KMeans
output$kmeans <- renderPlot({
df <- filedata()
means <- kmeans(df, centers = input$num_k)
df <- df %>%
mutate("labels" = as_factor(means$cluster),
)
(ggplot(df, aes(A,B, color=labels))+geom_point())
})
#this runs DBSCAN
}
shinyApp(ui = u, server = s)
runApp()
shinyApp(ui = u, server = s)
shiny::runApp()
library(shiny); runApp('My_Dashboard_Hans.R')
library(shiny); runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
# TODO: In this subtask, you need to run kmeans on a datatset the you generate from bivariate normal distributions. You can use the function rmvnorm() from the mvtnorm package to generate the data.
# First, generate three subsets wit 300 records from bivariate Normal distributions with the same covariance matrix sigma = (1, 0.3, 0.3, 1) and the following mean values:
# 1st set: mu = (0,1)
# 2nd set: mu = (3,6)
# 3rd set: mu = (-3, 6)
# combine the three subsets to have one dataset with dimensions (900, 2)
# Plot the dataset initially to see the shape of the clusters, your data should like the following plot
# install.packages('mvtnorm')
library('mvtnorm')
# Generate dataset wiith three clusters that are clearly separated
n <- 300
sigma <- matrix(data =c( 1, .3,.3,  1), ncol = 2, byrow = TRUE)
mus <- matrix(c(0, 1, 3, 6, -3, 6), 2, 3)
synData = data.frame()
for (i in 1:3){
mu = mus[,i]
temp <- rmvnorm(n = n, mean = mu, sigma = sigma)
synData <- rbind(synData, temp)
}
colnames(df) <- c('x', 'y')
# TODO: In this subtask, you need to run kmeans on a datatset the you generate from bivariate normal distributions. You can use the function rmvnorm() from the mvtnorm package to generate the data.
# First, generate three subsets wit 300 records from bivariate Normal distributions with the same covariance matrix sigma = (1, 0.3, 0.3, 1) and the following mean values:
# 1st set: mu = (0,1)
# 2nd set: mu = (3,6)
# 3rd set: mu = (-3, 6)
# combine the three subsets to have one dataset with dimensions (900, 2)
# Plot the dataset initially to see the shape of the clusters, your data should like the following plot
# install.packages('mvtnorm')
library('mvtnorm')
# Generate dataset wiith three clusters that are clearly separated
n <- 300
sigma <- matrix(data =c( 1, .3,.3,  1), ncol = 2, byrow = TRUE)
mus <- matrix(c(0, 1, 3, 6, -3, 6), 2, 3)
synData = data.frame()
for (i in 1:3){
mu = mus[,i]
temp <- rmvnorm(n = n, mean = mu, sigma = sigma)
synData <- rbind(synData, temp)
}
colnames(df) <- c('x', 'y')
install.packages('mvtnorm')
library('mvtnorm')
# Generate dataset wiith three clusters that are clearly separated
n <- 300
sigma <- matrix(data =c( 1, .3,.3,  1), ncol = 2, byrow = TRUE)
mus <- matrix(c(0, 1, 3, 6, -3, 6), 2, 3)
synData = data.frame()
for (i in 1:3){
mu = mus[,i]
temp <- rmvnorm(n = n, mean = mu, sigma = sigma)
synData <- rbind(synData, temp)
}
colnames(df) <- c('x', 'y')
install.packages("mvtnorm")
#install.packages('mvtnorm')
library('mvtnorm')
# Generate dataset wiith three clusters that are clearly separated
n <- 300
sigma <- matrix(data =c( 1, .3,.3,  1), ncol = 2, byrow = TRUE)
mus <- matrix(c(0, 1, 3, 6, -3, 6), 2, 3)
synData = data.frame()
for (i in 1:3){
mu = mus[,i]
temp <- rmvnorm(n = n, mean = mu, sigma = sigma)
synData <- rbind(synData, temp)
}
colnames(df) <- c('x', 'y')
# install.packages("fdm2id")
library("fdm2id")
install.packages("fdm2id")
library("fdm2id")
twomoons_data = data.twomoons(r = 1, n = 400, sigma = 0.1, levels = NULL,
graph = TRUE, seed = NULL)
library(shiny); runApp('My_Dashboard_Hans.R')
runApp('app5.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('app5.R')
runApp('My_Dashboard_Hans.R')
dbs <- DBSCAN(iris, minpts = 5, eps = 0.1)
data("iris")
dbs <- DBSCAN(iris, minpts = 5, eps = 0.1)
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- DBSCAN(iris, minpts = 5, eps = 0.1)
dbs$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- DBSCAN(iris, minpts = 5, eps = 5)
dbs$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- fpc::dbscan(iris, minpts = 5, eps = 5)
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- fpc::dbscan(iris, MinPts = 5, eps = 5)
dbs$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- fpc::dbscan(iris, MinPts = 5, eps = 0.1)
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- fpc::dbscan(iris, MinPts = 5, eps = 0.1)
dbs$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
dbs <- fpc::dbscan(iris, MinPts = 2, eps = 0.1)
dbs$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
# fpc package
res.fpc <- fpc::dbscan(iris, eps = 0.4, MinPts = 4)
res.fpc$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
# fpc package
res.fpc <- fpc::dbscan(iris, eps = 0.1, MinPts = 4)
res.fpc$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
# fpc package
res.fpc <- fpc::dbscan(iris, eps = 0.4, MinPts = 4)
res.fpc$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
# fpc package
res.fpc <- fpc::dbscan(iris, eps = 0.4, MinPts = 2)
res.fpc$cluster
data("iris")
iris <- as.matrix(iris[, 1:4])
# fpc package
res.fpc <- fpc::dbscan(iris, eps = 0.4, MinPts = 5)
res.fpc$cluster
runApp('My_Dashboard_Hans.R')
fpc_dbs$cluster
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
df2 <- load(iris)
ggplot(df2, aes(x=df2[,4]))+geom_boxplot()+theme_minimal()+facet_wrap(names(df2))
df2 <- load(iris)
df2
load(iris)
df <- iris
df
names(df)
df.names
cols(df)
cols_only(df)
library(tidyverse)
load(iris)
df <- iris
names(df)
names.df
runApp('My_Dashboard_Hans.R')
library(shiny); runApp('Template.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
install.packages("shinythemes")
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
runApp('My_Dashboard_Hans.R')
?plot
Y = c(100, 150, 120, 70, 60, 90)
X = c("Math", "CS", "EE", "BIO", "MED", "ME")
plot(Y, xaxt = "n", type = 'l', lwd = 3, pch = 15, xlab = "Department",
ylab = "# Students", ylim = c(0,160))
axis(side = 1, at = 1:6, labels = X)
})
log(1)
